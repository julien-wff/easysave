<?xml version="1.0" encoding="utf-8"?>

<root>
    <data name="Commands.Help.Description">
        <value>Display help on other commands</value>
    </data>
    <data name="Commands.Help.Args.Command.Description">
        <value>Display help of a specific command</value>
    </data>
    <data name="Commands.CommandNotFound">
        <value>Command '{0}' not found. Try 'easysave help' for more information.</value>
    </data>
    <data name="Commands.Help.GeneralHelp.Header" xml:space="preserve">
        <value>EasySave CLI Help Page

Usage: easysave [command] [arguments]

A CLI tool to backup your files

Available commands:</value>
    </data>
    <data name="Commands.Version.Description">
        <value>Display the version of the application</value>
    </data>
    <data name="Commands.WrongArgumentCount" xml:space="preserve">
        <value>Command expects {0} argument(s), {1} given. Type 'easysave help {2}' for more information.</value>
    </data>
    <data name="Commands.Version.Version" xml:space="preserve">
        <value>Easysave version {0} on {1}</value>
    </data>
    <data name="Commands.Usage" xml:space="preserve">
        <value>Usage: easysave {0}</value>
    </data>
    <data name="Commands.Flags.InCommand" xml:space="preserve">
        <value>[flags]</value>
    </data>
    <data name="Commands.Arguments" xml:space="preserve">
        <value>Arguments:</value>
    </data>
    <data name="Commands.Flags" xml:space="preserve">
        <value>Flags:</value>
    </data>
    <data name="Commands.Create.Description" xml:space="preserve">
        <value>Create a new job in the state file</value>
    </data>
    <data name="Commands.Create.Args.Name.Description" xml:space="preserve">
        <value>Name of the job to create</value>
    </data>
    <data name="Commands.Create.Args.Source.Description" xml:space="preserve">
        <value>Source folder to backup</value>
    </data>
    <data name="Commands.Create.Args.Destination.Description" xml:space="preserve">
        <value>Destination folder to backup to</value>
    </data>
    <data name="Commands.Create.Args.Type.Description" xml:space="preserve">
        <value>Type of backup to perform. Valid options and full and differential</value>
    </data>
    <data name="Checks.SourcePathInvalid" xml:space="preserve">
        <value>Source path is not valid.</value>
    </data>
    <data name="Checks.DestinationPathInvalid" xml:space="preserve">
        <value>Destination path is not valid.</value>
    </data>
    <data name="Checks.InvalidJobType" xml:space="preserve">
        <value>Invalid job type. Valid options are 'full' and 'differential'.</value>
    </data>
    <data name="Job.Created" xml:space="preserve">
        <value>Job '{0}' created successfully with ID {1}.</value>
    </data>
    <data name="Commands.Check.Description" xml:space="preserve">
        <value>Checks if the config is valid, and if the state matches all the rules</value>
    </data>
    <data name="Commands.Check.Args.Jobs.Description" xml:space="preserve">
        <value>Jobs to check. Use format selector (1,2 or 1-3 or job1,2-4). Optional</value>
    </data>
    <data name="Job.FetchError" xml:space="preserve">
        <value>Failed to fetch jobs from state file.</value>
    </data>
    <data name="Job.NoJobFound" xml:space="preserve">
        <value>No jobs found.</value>
    </data>
    <data name="Job.JobInformation.Attributes" xml:space="preserve">
        <value>  Source: {0}
  Destination: {1}
  Type: {2}
  State: {3}</value>
    </data>
    <data name="Job.CheckError" xml:space="preserve">
        <value>Job '{0}' (#{1}) is invalid: {2}</value>
    </data>
    <data name="Commands.Check.Result" xml:space="preserve">
        <value>Check of {0} job(s) complete with {1} errors.</value>
    </data>
    <data name="Checks.Valid" xml:space="preserve">
        <value>Check successful, no errors found.</value>
    </data>
    <data name="Checks.SourcePathDoesNotExist" xml:space="preserve">
        <value>Source path does not exist.</value>
    </data>
    <data name="Checks.DestinationPathDoesNotExist" xml:space="preserve">
        <value>Destination path does not exist.</value>
    </data>
    <data name="Checks.SharedRoot" xml:space="preserve">
        <value>Source and destination paths share the same root.</value>
    </data>
    <data name="Checks.DuplicateId" xml:space="preserve">
        <value>Job with the same ID already exists.</value>
    </data>
    <data name="Checks.DuplicateName" xml:space="preserve">
        <value>Job with the same name already exists.</value>
    </data>
    <data name="Checks.DuplicatePaths" xml:space="preserve">
        <value>Job with the same source and destination paths already exists.</value>
    </data>
    <data name="Checks.DestinationNotEmpty" xml:space="preserve">
        <value>Destination folder is not empty.</value>
    </data>
    <data name="Commands.Edit.Description" xml:space="preserve">
        <value>Edit a job from the state file.</value>
    </data>
    <data name="Commands.Edit.Args.Id.Description" xml:space="preserve">
        <value>Task ID</value>
    </data>
    <data name="Commands.Edit.Args.Name.Description" xml:space="preserve">
        <value>New name of the task</value>
    </data>
    <data name="Commands.Edit.Args.Source.Description" xml:space="preserve">
        <value>New source folder</value>
    </data>
    <data name="Commands.Edit.Args.Destination.Description" xml:space="preserve">
        <value>New destination folder</value>
    </data>
    <data name="Commands.Edit.Flags.Type.Description" xml:space="preserve">
        <value>New type of the  (full, differential or incremental)</value>
    </data>
    <data name="Checks.InvalidJobId" xml:space="preserve">
        <value>Invalid job ID</value>
    </data>
    <data name="Checks.JobNotFound" xml:space="preserve">
        <value>Cannot find job with ID #{0}</value>
    </data>
    <data name="Job.Edited" xml:space="preserve">
        <value>The job #{0} ({1}) has been edited successfully</value>
    </data>
</root>
